            return Response(SubscribeSerializer(
                get_object_or_404(User, pk=id), context={'request': request}
            ).data,
                status=status.HTTP_201_CREATED
            )



                @action(
        detail=False,
        permission_classes=(IsAuthenticated,),
        serializer_class=SubscribeSerializer,
    )
    def subscriptions(self, request):
        user = self.request.user
        queryset = User.objects.filter(following__subscriber_id=user.id)
        pages = self.paginate_queryset(queryset)
        serializer = self.get_serializer(
            pages,
            many=True,
            context={'request': request}
        )
        return self.get_paginated_response(serializer.data)





    tags = rest_framework.CharFilter(field_name='tags__slug')
    tags = rest_framework.ModelMultipleChoiceFilter(
        field_name='tags__slug',
        queryset=Tag.objects.all(),
        to_field_name='slug',
    )


    def get_permissions(self):
        if self.action == :
        return
        return super().get_permissions()


    def to_representation(self, instance):
        print('12')
        return RecipeSafeMethodSerializer(
            instance, context={'request': self.context.get('request')}
        ).data

    def update(self, instance, validated_data):
        tags = validated_data.pop('tags')
        ingredients = validated_data.pop('ingredients')
        return super().update(instance, validated_data)

    is_favorited = serializers.SerializerMethodField()
    is_in_shopping_cart = serializers.SerializerMethodField()

    def get_is_favorited(self, obj):
        if self.context['request'].user.is_anonymous:
            return False
        return Favorite.objects.filter(
            user=self.context['request'].user, recipe=obj
        ).exists()

    def get_is_in_shopping_cart(self, obj):
        if self.context['request'].user.is_anonymous:
            return False
        return ShoppingCart.objects.filter(
            user=self.context['request'].user, recipe=obj
        ).exists


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}